// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // control bits
    // c1: Mux load for A
    // A命令の時
    Not(in=instruction[15], out=cntMuxA);

    // c2: load for A
    // A命令の時　または　C命令かつd1=1
    Not(in=instruction[15], out=wc21);
    And(a=instruction[15], b=instruction[5], out=wc22);
    Or(a=wc21, b=wc22, out=cntLoadA);

    // c3: load for D
    // C命令　かつ d2=1
    And(a=instruction[15], b=instruction[4], out=cntLoadD);

    // c4: Mux select for A/M
    // C命令　かつ　a=1
    And(a=instruction[15], b=instruction[12], out=cntMuxAM);

    // c5: load for PC
    // C命令　かつ　j1・ng+j2・zr+j3・not zr・not ng
    And(a=instruction[2], b=ng, out=wc51);
    And(a=instruction[1], b=zr, out=wc52);
    Not(in=zr, out=wc53);
    Not(in=ng, out=wc54);
    And(a=instruction[0], b=wc53, out=wc55);
    And(a=wc55, b=wc54, out=wc56);
    Or(a=wc51, b=wc52, out=wc57);
    Or(a=wc57, b=wc56, out=wc58);
    And(a=instruction[15], b=wc58, out=cntLoadPC);

    // c6: ALU flags
    // なし

    // c7: writeM
    // C命令　かつ　d3=1
    And(a=instruction[15], b=instruction[3], out=writeM);

    // パーツ結合
    Mux16(a=outALU, b=instruction, sel=cntMuxA, out=outMuxA);
    ARegister(in=outMuxA, load=cntLoadA, out=outA, out[0..14]=addressM);
    DRegister(in=outALU, load=cntLoadD, out=outD);
    Mux16(a=outA, b=inM, sel=cntMuxAM, out=outAM);
    PC(in=outA, load=cntLoadPC, inc=true, reset=reset, out[0..14]=pc);
    ALU(x=outD, y=outAM, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU, 
        out=outM,
        zr=zr, ng=ng);
}